Authors         : Avery Lindley,  Noah Schroeder, Grant Siebring, Blake Eggleston
Last modified   : 12/9/2016


Compile & Run:
  A.  Everything
    1.  make

  B.  Scanner
    1.  make scanner
    2.  ./flairs <filename>

  C.  Parser
    1.  make parser
    2.  ./flairp <filename>

  D.  SemanticAnalyzer
    1.  make parser
    2.  ./flairv <filename>
    3.  Run as ./flairp -t <filename>
      a. This saves AST to a file in the root directory called <filename>.dot
      b. Open with GraphViz to see the new tree graph

  E.  Code Generator
    1.  make
    2.  ./flairc <filename>
    3.  Run as ./flairc -t <filename>
      a. This saves AST to a file in the root directory called <filename>.dot
      b. Open with GraphViz to see the new tree graph

  F  Test script
    1.  make run



Known Issues:
  Code Generator does not generate TM for very much, only math operations inside the main program body.
  Three address code can be generated for any program, but cannot be utilized for the TM generation.
  Needs better source code documentation.
  Documents that are generated by this code are output to the root directory and not the source folder.
  TypeChecker is not complete.
  We regenerate JavaDoc on every compilation. This is a design decision and is intentional.
  SymbolTable does NOT record the name(list) of the function(s) in which it is referenced. Will output.



Directory Structure :
  bin/              : stores the binary files
  doc/              : stores the javadoc in html form
  src/              : stores the .java files in a structure that is self descriptive
  test_programs/    : stores the .flr files used to test the project parts
  flairp            : script to run the parser
  flairs            : script to run the scanner
  flairv            : script used to output and test the SemanticAnalyzer, which itself calls the SymbolTable.
  flairc            : script used to create a .tm file with same name as original
  flairTest         : script that runs all of our test programs
  Makefile          : Contains the make commands for ease-of-use





High level Scanner design:
  Our scanner uses the same logic as a finite state automata.
  As the scanner takes in tokens, it switches states for when
  it is looking for a token, when it is taking an integer,
  and when it is taking in a string.
  It switches through these states to treat each token or character
  appropriately, and returns the type of each individual token.

High level Parser design:
  The parser takes the grammar rules, based on the grammar logic table for flair.
  This table is represented in a parseTable, and within this we create rule objects,
  add those objects to the table in specific locations, and the parse algorithm then
  uses that table to confirm there is no bad flair grammar in the input file.

  Upon completing the parsing of a file, the object returns true or
  false representing if the file is a proper flair program. The AST
  that is generated is then stored in the 'TableDrivenParser' object.

High level AST Design:
  Our AST is an object type ProgramNode.
  This SemanticNode object has children that are also different types
    SemanticNodes. Upon completing the SymbolTable and TypeChecker
    these nodes will contain attributes referencing their datatypes and
    other necessary information. Upon completing the 'ParseProgram()'
    method in TableDrivenParser we store the final tree which can be
    accessed using 'getAST()'.
